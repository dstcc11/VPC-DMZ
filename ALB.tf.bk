locals {
  alb_settings = {
    "albtest" = {
      target_ip   = ["10.111.4.200", ""]
      port        = "443"
      certificate = local.c0
    }
  }
}

locals {
  c0 = aws_acm_certificate.certs["*.kubrapoc.net"].arn
}

###################################################################################################
resource "aws_security_group" "alb-sg" {
  description = "SG for ALB"
  vpc_id      = aws_vpc.VPC["Insp"].id
  ingress {
    description = "Barracuda IP addresses"
    cidr_blocks = ["0.0.0.0/0"]
    from_port   = 0
    protocol    = "-1"
    to_port     = 0
  }
  egress {
    cidr_blocks = ["0.0.0.0/0"]
    from_port   = 0
    protocol    = "-1"
    to_port     = 0
  }
  tags = {
    Name = "alb-sg"
  }
}

resource "aws_lb" "ALB" {
  for_each           = local.alb_settings
  name               = "ALB-${each.key}"
  internal           = false
  load_balancer_type = "application"
  subnets            = [aws_subnet.subnet["Insp-public1"].id, aws_subnet.subnet["Insp-public2"].id]
  security_groups    = [aws_security_group.alb-sg.id]
  access_logs {
    bucket  = aws_s3_bucket.my-bucket-s3-2023-11-20.bucket
    prefix  = "alb"
    enabled = true
  }
}

resource "aws_lb_listener" "listener-alb" {
  for_each          = local.alb_settings
  load_balancer_arn = aws_lb.ALB[each.key].arn
  port              = each.value.port
  protocol          = "HTTPS"
  certificate_arn   = each.value.certificate
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.ALB-TG[each.key].arn
  }
}

resource "aws_lb_target_group" "ALB-TG" {
  for_each             = local.alb_settings
  name                 = "ALB-${each.key}"
  port                 = each.value.port
  protocol             = "HTTPS"
  target_type          = "ip"
  vpc_id               = aws_vpc.VPC["Insp"].id
  deregistration_delay = 10
  health_check {
    protocol            = "HTTPS"
    healthy_threshold   = 2
    unhealthy_threshold = 2
    timeout             = 2
    interval            = 5
    path                = "/"
    matcher             = "200-499"
  }
}

resource "aws_lb_target_group_attachment" "attach-ALBTG-1" {
  for_each          = { for k, v in local.alb_settings : k => v if v.target_ip[0] != "" }
  target_group_arn  = aws_lb_target_group.ALB-TG[each.key].arn
  target_id         = each.value.target_ip[0]
  port              = each.value.port
  availability_zone = "all"
}

resource "aws_lb_target_group_attachment" "attach-ALBTG-2" {
  for_each          = { for k, v in local.alb_settings : k => v if v.target_ip[1] != "" }
  target_group_arn  = aws_lb_target_group.ALB-TG[each.key].arn
  target_id         = each.value.target_ip[1]
  port              = each.value.port
  availability_zone = "all"
}